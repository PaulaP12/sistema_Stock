{"remainingRequest":"/var/www/html/sistema_stock/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/var/www/html/sistema_stock/node_modules/cache-loader/dist/cjs.js??ref--0-0!/var/www/html/sistema_stock/node_modules/vue-loader/lib/index.js??vue-loader-options!/var/www/html/sistema_stock/src/components/ABMArticles.vue?vue&type=template&id=2b5f9f6e&scoped=true&","dependencies":[{"path":"/var/www/html/sistema_stock/src/components/ABMArticles.vue","mtime":1624585721961},{"path":"/var/www/html/sistema_stock/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/var/www/html/sistema_stock/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/var/www/html/sistema_stock/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/var/www/html/sistema_stock/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}